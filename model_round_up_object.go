/*
Up API

The Up API gives you programmatic access to your balances and transaction data. You can request past transactions or set up webhooks to receive real-time events when new transactions hit your account. It’s new, it’s exciting and it’s just the beginning. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package upbankapi

import (
	"encoding/json"
)

// RoundUpObject Provides information about how a Round Up was applied, such as whether or not a boost was included in the Round Up. 
type RoundUpObject struct {
	Amount RoundUpObjectAmount `json:"amount"`
	BoostPortion NullableRoundUpObjectBoostPortion `json:"boostPortion"`
}

// NewRoundUpObject instantiates a new RoundUpObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoundUpObject(amount RoundUpObjectAmount, boostPortion NullableRoundUpObjectBoostPortion) *RoundUpObject {
	this := RoundUpObject{}
	this.Amount = amount
	this.BoostPortion = boostPortion
	return &this
}

// NewRoundUpObjectWithDefaults instantiates a new RoundUpObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoundUpObjectWithDefaults() *RoundUpObject {
	this := RoundUpObject{}
	return &this
}

// GetAmount returns the Amount field value
func (o *RoundUpObject) GetAmount() RoundUpObjectAmount {
	if o == nil {
		var ret RoundUpObjectAmount
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *RoundUpObject) GetAmountOk() (*RoundUpObjectAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *RoundUpObject) SetAmount(v RoundUpObjectAmount) {
	o.Amount = v
}

// GetBoostPortion returns the BoostPortion field value
// If the value is explicit nil, the zero value for RoundUpObjectBoostPortion will be returned
func (o *RoundUpObject) GetBoostPortion() RoundUpObjectBoostPortion {
	if o == nil || o.BoostPortion.Get() == nil {
		var ret RoundUpObjectBoostPortion
		return ret
	}

	return *o.BoostPortion.Get()
}

// GetBoostPortionOk returns a tuple with the BoostPortion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoundUpObject) GetBoostPortionOk() (*RoundUpObjectBoostPortion, bool) {
	if o == nil {
		return nil, false
	}
	return o.BoostPortion.Get(), o.BoostPortion.IsSet()
}

// SetBoostPortion sets field value
func (o *RoundUpObject) SetBoostPortion(v RoundUpObjectBoostPortion) {
	o.BoostPortion.Set(&v)
}

func (o RoundUpObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["boostPortion"] = o.BoostPortion.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRoundUpObject struct {
	value *RoundUpObject
	isSet bool
}

func (v NullableRoundUpObject) Get() *RoundUpObject {
	return v.value
}

func (v *NullableRoundUpObject) Set(val *RoundUpObject) {
	v.value = val
	v.isSet = true
}

func (v NullableRoundUpObject) IsSet() bool {
	return v.isSet
}

func (v *NullableRoundUpObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoundUpObject(val *RoundUpObject) *NullableRoundUpObject {
	return &NullableRoundUpObject{value: val, isSet: true}
}

func (v NullableRoundUpObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoundUpObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


